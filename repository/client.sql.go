// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: client.sql

package repository

import (
	"context"

	"github.com/google/uuid"
	"github.com/lib/pq"
)

const createClient = `-- name: CreateClient :one
INSERT INTO clients (id, secret, domain, is_public, user_id, allowed_grants, scope) 
VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING id, secret, domain, is_public, user_id, allowed_grants, scope, created_at
`

type CreateClientParams struct {
	ID            string    `json:"id"`
	Secret        []byte    `json:"secret"`
	Domain        string    `json:"domain"`
	IsPublic      bool      `json:"is_public"`
	UserID        uuid.UUID `json:"user_id"`
	AllowedGrants []string  `json:"allowed_grants"`
	Scope         string    `json:"scope"`
}

func (q *Queries) CreateClient(ctx context.Context, arg CreateClientParams) (Client, error) {
	row := q.queryRow(ctx, q.createClientStmt, createClient,
		arg.ID,
		arg.Secret,
		arg.Domain,
		arg.IsPublic,
		arg.UserID,
		pq.Array(arg.AllowedGrants),
		arg.Scope,
	)
	var i Client
	err := row.Scan(
		&i.ID,
		&i.Secret,
		&i.Domain,
		&i.IsPublic,
		&i.UserID,
		pq.Array(&i.AllowedGrants),
		&i.Scope,
		&i.CreatedAt,
	)
	return i, err
}

const deleteClient = `-- name: DeleteClient :exec
DELETE FROM clients WHERE id = $1
`

func (q *Queries) DeleteClient(ctx context.Context, id string) error {
	_, err := q.exec(ctx, q.deleteClientStmt, deleteClient, id)
	return err
}

const getClientByID = `-- name: GetClientByID :one
SELECT id, secret, domain, is_public, user_id, allowed_grants, scope, created_at FROM clients WHERE id = $1
`

func (q *Queries) GetClientByID(ctx context.Context, id string) (Client, error) {
	row := q.queryRow(ctx, q.getClientByIDStmt, getClientByID, id)
	var i Client
	err := row.Scan(
		&i.ID,
		&i.Secret,
		&i.Domain,
		&i.IsPublic,
		&i.UserID,
		pq.Array(&i.AllowedGrants),
		&i.Scope,
		&i.CreatedAt,
	)
	return i, err
}

const getClientByUserID = `-- name: GetClientByUserID :many
SELECT id, secret, domain, is_public, user_id, allowed_grants, scope, created_at FROM clients WHERE user_id = $1 ORDER BY created_at DESC
`

func (q *Queries) GetClientByUserID(ctx context.Context, userID uuid.UUID) ([]Client, error) {
	rows, err := q.query(ctx, q.getClientByUserIDStmt, getClientByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Client
	for rows.Next() {
		var i Client
		if err := rows.Scan(
			&i.ID,
			&i.Secret,
			&i.Domain,
			&i.IsPublic,
			&i.UserID,
			pq.Array(&i.AllowedGrants),
			&i.Scope,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateClientSecret = `-- name: UpdateClientSecret :one
UPDATE clients SET secret = $1 WHERE id = $2 RETURNING id, secret, domain, is_public, user_id, allowed_grants, scope, created_at
`

type UpdateClientSecretParams struct {
	Secret []byte `json:"secret"`
	ID     string `json:"id"`
}

func (q *Queries) UpdateClientSecret(ctx context.Context, arg UpdateClientSecretParams) (Client, error) {
	row := q.queryRow(ctx, q.updateClientSecretStmt, updateClientSecret, arg.Secret, arg.ID)
	var i Client
	err := row.Scan(
		&i.ID,
		&i.Secret,
		&i.Domain,
		&i.IsPublic,
		&i.UserID,
		pq.Array(&i.AllowedGrants),
		&i.Scope,
		&i.CreatedAt,
	)
	return i, err
}
