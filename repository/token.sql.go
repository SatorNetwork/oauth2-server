// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: token.sql

package repository

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createToken = `-- name: CreateToken :one
INSERT INTO tokens (
    client_id, 
    user_id, 
    redirect_uri, 
    scope, 
    code,
    code_created_at, 
    code_expires_in,
    code_challenge,
    code_challenge_method,
    access,
    access_created_at,
    access_expires_in,
    refresh,
    refresh_created_at,
    refresh_expires_in
) VALUES (
    $1, 
    $2, 
    $3, 
    $4, 
    $5,
    $6, 
    $7,
    $8,
    $9,
    $10,
    $11,
    $12,
    $13,
    $14,
    $15
) RETURNING id, client_id, user_id, redirect_uri, scope, code, code_created_at, code_expires_in, code_challenge, code_challenge_method, access, access_created_at, access_expires_in, refresh, refresh_created_at, refresh_expires_in, created_at
`

type CreateTokenParams struct {
	ClientID            string        `json:"client_id"`
	UserID              uuid.NullUUID `json:"user_id"`
	RedirectURI         string        `json:"redirect_uri"`
	Scope               string        `json:"scope"`
	Code                string        `json:"code"`
	CodeCreatedAt       sql.NullTime  `json:"code_created_at"`
	CodeExpiresIn       int64         `json:"code_expires_in"`
	CodeChallenge       string        `json:"code_challenge"`
	CodeChallengeMethod string        `json:"code_challenge_method"`
	Access              string        `json:"access"`
	AccessCreatedAt     sql.NullTime  `json:"access_created_at"`
	AccessExpiresIn     int64         `json:"access_expires_in"`
	Refresh             string        `json:"refresh"`
	RefreshCreatedAt    sql.NullTime  `json:"refresh_created_at"`
	RefreshExpiresIn    int64         `json:"refresh_expires_in"`
}

func (q *Queries) CreateToken(ctx context.Context, arg CreateTokenParams) (Token, error) {
	row := q.queryRow(ctx, q.createTokenStmt, createToken,
		arg.ClientID,
		arg.UserID,
		arg.RedirectURI,
		arg.Scope,
		arg.Code,
		arg.CodeCreatedAt,
		arg.CodeExpiresIn,
		arg.CodeChallenge,
		arg.CodeChallengeMethod,
		arg.Access,
		arg.AccessCreatedAt,
		arg.AccessExpiresIn,
		arg.Refresh,
		arg.RefreshCreatedAt,
		arg.RefreshExpiresIn,
	)
	var i Token
	err := row.Scan(
		&i.ID,
		&i.ClientID,
		&i.UserID,
		&i.RedirectURI,
		&i.Scope,
		&i.Code,
		&i.CodeCreatedAt,
		&i.CodeExpiresIn,
		&i.CodeChallenge,
		&i.CodeChallengeMethod,
		&i.Access,
		&i.AccessCreatedAt,
		&i.AccessExpiresIn,
		&i.Refresh,
		&i.RefreshCreatedAt,
		&i.RefreshExpiresIn,
		&i.CreatedAt,
	)
	return i, err
}

const deleteByAccess = `-- name: DeleteByAccess :exec
DELETE FROM tokens WHERE access = $1
`

func (q *Queries) DeleteByAccess(ctx context.Context, access string) error {
	_, err := q.exec(ctx, q.deleteByAccessStmt, deleteByAccess, access)
	return err
}

const deleteByCode = `-- name: DeleteByCode :exec
DELETE FROM tokens WHERE code = $1
`

func (q *Queries) DeleteByCode(ctx context.Context, code string) error {
	_, err := q.exec(ctx, q.deleteByCodeStmt, deleteByCode, code)
	return err
}

const deleteByRefresh = `-- name: DeleteByRefresh :exec
DELETE FROM tokens WHERE refresh = $1
`

func (q *Queries) DeleteByRefresh(ctx context.Context, refresh string) error {
	_, err := q.exec(ctx, q.deleteByRefreshStmt, deleteByRefresh, refresh)
	return err
}

const deleteExpiredTokens = `-- name: DeleteExpiredTokens :exec
DELETE FROM tokens 
WHERE (code_expires_in > 0 AND code_created_at + code_expires_in * interval '1 second' < now())
OR (refresh_expires_in > 0 AND refresh_created_at + refresh_expires_in * interval '1 second' < now())
`

func (q *Queries) DeleteExpiredTokens(ctx context.Context) error {
	_, err := q.exec(ctx, q.deleteExpiredTokensStmt, deleteExpiredTokens)
	return err
}

const getTokenByAccess = `-- name: GetTokenByAccess :one
SELECT id, client_id, user_id, redirect_uri, scope, code, code_created_at, code_expires_in, code_challenge, code_challenge_method, access, access_created_at, access_expires_in, refresh, refresh_created_at, refresh_expires_in, created_at FROM tokens WHERE access = $1
`

func (q *Queries) GetTokenByAccess(ctx context.Context, access string) (Token, error) {
	row := q.queryRow(ctx, q.getTokenByAccessStmt, getTokenByAccess, access)
	var i Token
	err := row.Scan(
		&i.ID,
		&i.ClientID,
		&i.UserID,
		&i.RedirectURI,
		&i.Scope,
		&i.Code,
		&i.CodeCreatedAt,
		&i.CodeExpiresIn,
		&i.CodeChallenge,
		&i.CodeChallengeMethod,
		&i.Access,
		&i.AccessCreatedAt,
		&i.AccessExpiresIn,
		&i.Refresh,
		&i.RefreshCreatedAt,
		&i.RefreshExpiresIn,
		&i.CreatedAt,
	)
	return i, err
}

const getTokenByCode = `-- name: GetTokenByCode :one
SELECT id, client_id, user_id, redirect_uri, scope, code, code_created_at, code_expires_in, code_challenge, code_challenge_method, access, access_created_at, access_expires_in, refresh, refresh_created_at, refresh_expires_in, created_at FROM tokens WHERE code = $1
`

func (q *Queries) GetTokenByCode(ctx context.Context, code string) (Token, error) {
	row := q.queryRow(ctx, q.getTokenByCodeStmt, getTokenByCode, code)
	var i Token
	err := row.Scan(
		&i.ID,
		&i.ClientID,
		&i.UserID,
		&i.RedirectURI,
		&i.Scope,
		&i.Code,
		&i.CodeCreatedAt,
		&i.CodeExpiresIn,
		&i.CodeChallenge,
		&i.CodeChallengeMethod,
		&i.Access,
		&i.AccessCreatedAt,
		&i.AccessExpiresIn,
		&i.Refresh,
		&i.RefreshCreatedAt,
		&i.RefreshExpiresIn,
		&i.CreatedAt,
	)
	return i, err
}

const getTokenByRefresh = `-- name: GetTokenByRefresh :one
SELECT id, client_id, user_id, redirect_uri, scope, code, code_created_at, code_expires_in, code_challenge, code_challenge_method, access, access_created_at, access_expires_in, refresh, refresh_created_at, refresh_expires_in, created_at FROM tokens WHERE refresh = $1
`

func (q *Queries) GetTokenByRefresh(ctx context.Context, refresh string) (Token, error) {
	row := q.queryRow(ctx, q.getTokenByRefreshStmt, getTokenByRefresh, refresh)
	var i Token
	err := row.Scan(
		&i.ID,
		&i.ClientID,
		&i.UserID,
		&i.RedirectURI,
		&i.Scope,
		&i.Code,
		&i.CodeCreatedAt,
		&i.CodeExpiresIn,
		&i.CodeChallenge,
		&i.CodeChallengeMethod,
		&i.Access,
		&i.AccessCreatedAt,
		&i.AccessExpiresIn,
		&i.Refresh,
		&i.RefreshCreatedAt,
		&i.RefreshExpiresIn,
		&i.CreatedAt,
	)
	return i, err
}
