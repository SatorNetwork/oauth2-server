// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0

package repository

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
	"time"

	"github.com/google/uuid"
)

type UserVerificationRequestType string

const (
	UserVerificationRequestTypeEmailChange       UserVerificationRequestType = "email_change"
	UserVerificationRequestTypeEmailVerification UserVerificationRequestType = "email_verification"
	UserVerificationRequestTypePasswordReset     UserVerificationRequestType = "password_reset"
	UserVerificationRequestTypeDeleteAccount     UserVerificationRequestType = "delete_account"
)

func (e *UserVerificationRequestType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = UserVerificationRequestType(s)
	case string:
		*e = UserVerificationRequestType(s)
	default:
		return fmt.Errorf("unsupported scan type for UserVerificationRequestType: %T", src)
	}
	return nil
}

type NullUserVerificationRequestType struct {
	UserVerificationRequestType UserVerificationRequestType
	Valid                       bool // Valid is true if UserVerificationRequestType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullUserVerificationRequestType) Scan(value interface{}) error {
	if value == nil {
		ns.UserVerificationRequestType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.UserVerificationRequestType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullUserVerificationRequestType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return ns.UserVerificationRequestType, nil
}

type Client struct {
	ID            string    `json:"id"`
	Secret        []byte    `json:"secret"`
	Domain        string    `json:"domain"`
	IsPublic      bool      `json:"is_public"`
	UserID        uuid.UUID `json:"user_id"`
	AllowedGrants []string  `json:"allowed_grants"`
	Scope         string    `json:"scope"`
	CreatedAt     time.Time `json:"created_at"`
}

type Token struct {
	ID                  uuid.UUID     `json:"id"`
	ClientID            string        `json:"client_id"`
	UserID              uuid.NullUUID `json:"user_id"`
	RedirectURI         string        `json:"redirect_uri"`
	Scope               string        `json:"scope"`
	Code                string        `json:"code"`
	CodeCreatedAt       sql.NullTime  `json:"code_created_at"`
	CodeExpiresIn       int64         `json:"code_expires_in"`
	CodeChallenge       string        `json:"code_challenge"`
	CodeChallengeMethod string        `json:"code_challenge_method"`
	Access              string        `json:"access"`
	AccessCreatedAt     sql.NullTime  `json:"access_created_at"`
	AccessExpiresIn     int64         `json:"access_expires_in"`
	Refresh             string        `json:"refresh"`
	RefreshCreatedAt    sql.NullTime  `json:"refresh_created_at"`
	RefreshExpiresIn    int64         `json:"refresh_expires_in"`
	CreatedAt           time.Time     `json:"created_at"`
}

type User struct {
	ID         uuid.UUID    `json:"id"`
	Email      string       `json:"email"`
	Password   []byte       `json:"password"`
	CreatedAt  time.Time    `json:"created_at"`
	UpdatedAt  sql.NullTime `json:"updated_at"`
	VerifiedAt sql.NullTime `json:"verified_at"`
}

type UserVerification struct {
	RequestType      UserVerificationRequestType `json:"request_type"`
	UserID           uuid.UUID                   `json:"user_id"`
	Email            string                      `json:"email"`
	VerificationCode []byte                      `json:"verification_code"`
	ExpiresAt        time.Time                   `json:"expires_at"`
	CreatedAt        time.Time                   `json:"created_at"`
}
